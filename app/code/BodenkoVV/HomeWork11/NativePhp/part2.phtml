<?php
declare(strict_types=1);
namespace part2_Class;

use ReflectionClass;
use ReflectionClassConstant;
use ReflectionMethod;

class ClassContent
{
    const MY_DEF_NAME = 'Big Bob';
    const MY_DEF_SEX = 'man';
    const MY_DEF_OLD = 34;

    public $pub_test1, $pub_test2;
    private $priv_test1, $priv_test2;

    private function childNameValuePriv($name = MY_DEF_NAME)
    {
        return $name;
    }

    public function childNameValuePub($name = MY_DEF_NAME)
    {
        return $name;
    }

}

class ChildClassContent extends ClassContent
{
    const MY_DEF_NAME_CHILD = 'Bigll Bob';
    const MY_DEF_SEX_CHILD = 'mann';
    const MY_DEF_OLD_CHILD = 35;

    public $pub_test1_child, $pub_test2_child;
    private $priv_test1_child, $priv_test2_child;

    public function getName()
    {
        return $this->childNameValuePub();
    }
    }

/**
 * Class Profile
 */
class Profile
{
    /**
     * @return string
     */
    public function getUserName(): string
    {
        return 'Foo';
    }
}


class GetClassData
{
    public function getAllConstNameValue($temp)
    {
        $reflectionClass = new \ReflectionClassConstant($temp);
        foreach ($reflectionClass as $items) {
            echo $items->getName . "=" . $items->getValue . "\n";
        }
    }

    public function getAllPublicMetod($temp)
    {
        $curClassContent = new ClassContent();
        $reflectionClass = new ReflectionMethod('ClassContent');
        foreach ($reflectionClass as $items) {
            echo $items->getName . "=" . $items->getValue . "\n";
        }

    }


}

$curClassContent = new ClassContent();
$curChildClassContent = new ChildClassContent();
$curProfile = new Profile();
$curGetClassData = new GetClassData();


//$foo1->getAllConstNameValue();
//$foo1->getAllPublicMetod();

//$curGetClassData->getAllConstNameValue($curClassContent);
$curGetClassData->getAllPublicMetod($curClassContent );

// инициализация
$reflectionClass = new \ReflectionClass($curClassContent);

// получить имя класса
//var_dump($reflectionClass->getName());

// получить документацию класса
//var_dump($reflectionClass->getDocComment());

